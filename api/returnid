const { Client } = require("discord.js"); // Usando a biblioteca discord.js

module.exports = async (req, res) => {
  try {
    // Verifique se o parâmetro 'channelId' foi passado na query
    const { channelId } = req.query;
    
    if (!channelId) {
      return res.status(400).json({ error: "Falta o 'channelId' na query." });
    }

    // Crie um cliente do Discord para interagir com a API
    const client = new Client({ intents: ['GUILDS', 'GUILD_MESSAGES'] });

    // Logando no Discord com o token (substitua pelo seu token)
    await client.login("MTA4Njk5MDUzNzAyODAyNjQ0MA.GfpcMs.FwkqbRfxWo5_XjwicxLaxOzkU6qDsbH6HnIxPE");

    // Esperando que o cliente se conecte antes de buscar a mensagem
    client.once('ready', async () => {
      try {
        const channel = await client.channels.fetch(channelId); // Obtém o canal

        // Pega todas as mensagens do canal (limitado por 100 mensagens por vez)
        const messages = await channel.messages.fetch({ limit: 100 }); // Ajuste o limite conforme necessário

        // Filtra as mensagens enviadas pelo bot (você pode substituir pelo ID do seu bot)
        const botMessages = messages.filter(msg => msg.author.id === client.user.id);

        // Se não houver mensagens do bot
        if (botMessages.size === 0) {
          return res.status(404).json({ error: "Nenhuma mensagem do bot encontrada no canal." });
        }

        // Pega o ID da primeira mensagem do bot
        const firstBotMessage = botMessages.first();
        const firstBotMessageId = firstBotMessage.id;

        // Retorna o ID da primeira mensagem do bot
        res.status(200).json({ firstBotMessageId });

        client.destroy(); // Desconecta o cliente após concluir
      } catch (error) {
        res.status(500).json({ error: "Erro ao buscar mensagens: " + error.message });
      }
    });

  } catch (error) {
    res.status(500).json({ error: "Erro no servidor: " + error.message });
  }
};
